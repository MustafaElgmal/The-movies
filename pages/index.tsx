/* eslint-disable @next/next/no-img-element */
import type { GetServerSideProps, GetStaticProps, NextPage } from "next";
import Head from "next/head";
import {
  getCategoriesFromMovieApi,
  getFilmsFromMovieApi,
  getPopularFilms,
} from "../utils/apis";
import { prisma } from "../lib/prisma";
import Landing from "../components/landing";
import Link from "next/link";
import { StarIcon } from "@heroicons/react/20/solid";
import { classNames } from "../constants";
import { useDispatch } from "react-redux";
import { useEffect, useState } from "react";
import { useAppSelector } from "../redux/app/hookes";
import { generateIndex, generateNumber } from "../utils/functions";

const Home: NextPage = () => {
  const films = useAppSelector((state) => state.filmsSlice.popularFilms);
  const [pageNo, setPageNo] = useState(generateNumber());
  const [imageUrl, setImageUrl] = useState(
    "https://a.ltrbxd.com/resized/sm/upload/q2/0n/4m/oh/pearl-1200-1200-675-675-crop-000000.jpg?v=0ed37f5964"
  );

  const dispatch = useDispatch();
  const updatePopularFilms = async () => {
    await getPopularFilms(dispatch, pageNo, setImageUrl);
  };
  useEffect(() => {
    updatePopularFilms();
  }, [pageNo]);
  return (
    <div className="bgcolor w-full min-h-screen">
      <Head>
        <title>The End</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div
        className="bg"
        style={{
          backgroundImage: `url(${imageUrl})`,
        }}
      >
        <Landing />
        <div className="bgcolor">
          <div className="mx-auto max-w-7xl overflow-hidden sm:px-6 lg:px-8">
            <h3 className="text-gray-500 pb-3">Popular Films</h3>
            <h2 className="sr-only">films</h2>

            <div className="-mx-px grid grid-cols-2 border-l border-gray-200 sm:mx-0 md:grid-cols-3 lg:grid-cols-4">
              {films.map((film) => (
                <Link key={film.id} href={`/films/${film.id}`}>
                  <div className="group relative border-r border-b border-gray-200 p-4 sm:p-6 cursor-pointer">
                    <div className="aspect-w-1 aspect-h-1 overflow-hidden rounded-lg bg-gray-200 group-hover:opacity-75">
                      <img
                        src={`https://image.tmdb.org/t/p/w780/${film.poster_path}`}
                        alt="NoPhoto"
                        className="h-full w-full object-cover object-center"
                      />
                    </div>
                    <div className="pt-10 pb-4 text-center">
                      <h3 className="text-sm font-medium text-gray-900">
                        <a className="hover:text-white">
                          <span
                            aria-hidden="true"
                            className="absolute inset-0"
                          />
                          {film.title}
                        </a>
                      </h3>
                      <div className="mt-3 flex flex-col items-center">
                        <p className="sr-only">{film.rating} out of 5 stars</p>
                        <div className="flex items-center">
                          {[0, 1, 2, 3, 4].map((rating) => (
                            <StarIcon
                              key={rating}
                              className={classNames(
                                film.rating > rating
                                  ? "text-yellow-400"
                                  : "text-gray-200",
                                "flex-shrink-0 h-5 w-5"
                              )}
                              aria-hidden="true"
                            />
                          ))}
                        </div>
                        <p className="mt-1 text-sm text-gray-500">
                          {film.totalReviews} reviews
                        </p>
                      </div>
                    </div>
                  </div>
                </Link>
              ))}
            </div>

            <div className="flex justify-between">
              {pageNo > 1 ? (
                <div>
                  <h1
                    className=" text-xl font-bold uppercase txt cursor-pointer"
                    onClick={() => setPageNo(pageNo - 1)}
                  >
                    prev
                  </h1>
                </div>
              ) : null}

              {pageNo < 500 ? (
                <div>
                  <h1
                    className=" text-xl font-bold uppercase txt cursor-pointer"
                    onClick={() => setPageNo(pageNo + 1)}
                  >
                    next
                  </h1>
                </div>
              ) : null}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export const getStaticProps: GetStaticProps = async () => {
  try {
    const categories = await getCategoriesFromMovieApi();
    const films = await getFilmsFromMovieApi();
    for (let i = 0; i < categories.length; i++) {
      const category = await prisma.category.findFirst({
        where: { id: categories[i].id },
      });
      if (!category) {
        await prisma.category.create({
          data: {
            id: categories[i].id,
            name: categories[i].name,
          },
        });
      }
    }
    for (let i = 0; i < films.length; i++) {
      const film = await prisma.film.findFirst({ where: { id: films[i].id } });
      if (!film) {
        if (films[i].poster_path && films[i].backdrop_path) {
          const profilePath = films[i].poster_path.split("/");
          const coverPath = films[i].backdrop_path.split("/");
          await prisma.film.create({
            data: {
              id: films[i].id,
              name: films[i].title,
              description: films[i].overview,
              profilePath: profilePath[profilePath.length - 1],
              coverPath: coverPath[coverPath.length - 1],
            },
          });
        } else if (films[i].poster_path) {
          const profilePath = films[i].poster_path.split("/");
          await prisma.film.create({
            data: {
              id: films[i].id,
              name: films[i].title,
              description: films[i].overview,
              profilePath: profilePath[profilePath.length - 1],
            },
          });
        } else if (films[i].backdrop_path) {
          const coverPath = films[i].backdrop_path.split("/");
          await prisma.film.create({
            data: {
              id: films[i].id,
              name: films[i].title,
              description: films[i].overview,
              coverPath: coverPath[coverPath.length - 1],
            },
          });
        } else {
          await prisma.film.create({
            data: {
              id: films[i].id,
              name: films[i].title,
              description: films[i].overview,
            },
          });
        }

        for (let j = 0; j < films[i].genre_ids.length; j++) {
          await prisma.filmGeners.create({
            data: {
              filmId: films[i].id,
              categoryId: films[i].genre_ids[j],
            },
          });
        }
      }
    }

    return {
      props: { categories },
      revalidate: 604800,
    };
  } catch (e) {
    console.log(e);
  }
  return {
    props: { categories: [] },
    revalidate: 604800,
  };
};

export default Home;
